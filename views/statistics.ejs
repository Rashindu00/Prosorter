<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ProSorter Statistics</title>
    <link rel="stylesheet" type="text/css" href="/css/enhanced-style.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="sidebar">
        <div class="logo">
            <img src="/images/ProSorter.png" alt="ProSorter" style="width: 60px; height: 60px;">
        </div>
        <ul class="menu">
            <li>
                <a href="/dashboard">
                    <i class="fas fa-tachometer-alt"></i>
                    <span>Dashboard</span>
                </a>
            </li>
            <li class="active">
                <a href="/statistics">
                    <i class="fas fa-chart-bar"></i>
                    <span>Statistics</span>
                </a>
            </li>
            <li>
                <a href="#" onclick="showProfile()">
                    <i class="fas fa-user"></i>
                    <span>Profile</span>
                </a>
            </li>
            <li>
                <a href="#" onclick="showActivities()">
                    <i class="fas fa-history"></i>
                    <span>Activities</span>
                </a>
            </li>
            <li class="logout">
                <form action="/logout" method="POST" style="margin: 0;">
                    <button type="submit" style="background: none; border: none; color: white; cursor: pointer; width: 100%; text-align: left; padding: 1rem; display: flex; align-items: center; gap: 1.5rem;">
                        <i class="fas fa-sign-out-alt"></i>
                        <span>Logout</span>
                    </button>
                </form>
            </li>
        </ul>
    </div>

    <div class="main--content">
        <div class="header--wrapper">
            <div class="header--title">
                <span>Analytics & Reports</span>
                <h2>Statistics</h2>
            </div>
            <div class="user--info">
                <div class="user-avatar">
                    <i class="fas fa-user-circle"></i>
                    <span><%= user.username %></span>
                </div>
            </div>
        </div>

        <!-- Statistics Summary Cards -->
        <div class="stats-summary">
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-chart-line"></i>
                </div>
                <div class="stat-info">
                    <h3 id="totalTransactions"><%= stats.reduce((sum, day) => sum + day.totalTransactions, 0) %></h3>
                    <p>Total Transactions (30 days)</p>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-coins"></i>
                </div>
                <div class="stat-info">
                    <h3 id="totalAmount">Rs <%= stats.reduce((sum, day) => sum + day.totalAmount, 0) %></h3>
                    <p>Total Amount (30 days)</p>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-calendar-day"></i>
                </div>
                <div class="stat-info">
                    <h3 id="avgDaily">Rs <%= Math.round(stats.reduce((sum, day) => sum + day.totalAmount, 0) / 30) %></h3>
                    <p>Daily Average</p>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-trending-up"></i>
                </div>
                <div class="stat-info">
                    <h3 id="busyDays"><%= stats.filter(day => day.totalTransactions > 0).length %></h3>
                    <p>Active Days</p>
                </div>
            </div>
        </div>

        <!-- Charts Section -->
        <div class="charts-section">
            <div class="chart-container">
                <div class="chart-card">
                    <div class="chart-header">
                        <h3>Daily Transaction Trends</h3>
                        <div class="chart-controls">
                            <button onclick="switchChart('line')" class="chart-btn active" id="lineBtn">Line</button>
                            <button onclick="switchChart('bar')" class="chart-btn" id="barBtn">Bar</button>
                        </div>
                    </div>
                    <canvas id="transactionChart"></canvas>
                </div>
            </div>

            <div class="chart-container">
                <div class="chart-card">
                    <div class="chart-header">
                        <h3>Coin Distribution (30 days)</h3>
                    </div>
                    <canvas id="coinDistributionChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Data Table -->
        <div class="data-section">
            <div class="card">
                <div class="card-header">
                    <h3>Daily Statistics</h3>
                    <div class="table-controls">
                        <input type="text" id="searchInput" placeholder="Search dates..." onkeyup="filterTable()">
                        <button onclick="exportTable()" class="export-btn">
                            <i class="fas fa-download"></i> Export CSV
                        </button>
                    </div>
                </div>
                <div class="table-container">
                    <table id="statisticsTable">
                        <thead>
                            <tr>
                                <th onclick="sortTable(0)">Date <i class="fas fa-sort"></i></th>
                                <th onclick="sortTable(1)">Transactions <i class="fas fa-sort"></i></th>
                                <th onclick="sortTable(2)">Total Amount <i class="fas fa-sort"></i></th>
                                <th onclick="sortTable(3)">Rs.1 Coins <i class="fas fa-sort"></i></th>
                                <th onclick="sortTable(4)">Rs.2 Coins <i class="fas fa-sort"></i></th>
                                <th onclick="sortTable(5)">Rs.5 Coins <i class="fas fa-sort"></i></th>
                                <th onclick="sortTable(6)">Rs.10 Coins <i class="fas fa-sort"></i></th>
                            </tr>
                        </thead>
                        <tbody>
                            <% stats.forEach(day => { %>
                                <tr>
                                    <td><%= new Date(day.date).toLocaleDateString() %></td>
                                    <td><%= day.totalTransactions %></td>
                                    <td>Rs <%= day.totalAmount %></td>
                                    <td><%= day.coinCounts.coin1 || 0 %></td>
                                    <td><%= day.coinCounts.coin2 || 0 %></td>
                                    <td><%= day.coinCounts.coin5 || 0 %></td>
                                    <td><%= day.coinCounts.coin10 || 0 %></td>
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Hidden data for JavaScript -->
    <script id="statsData" type="application/json">
        <%- JSON.stringify(stats) %>
    </script>

    <script>
        let transactionChart = null;
        let coinChart = null;
        let currentChartType = 'line';
        let statsData = null;

        // Initialize charts when page loads
        document.addEventListener('DOMContentLoaded', function() {
            // Parse stats data from script tag
            try {
                statsData = JSON.parse(document.getElementById('statsData').textContent);
                initializeCharts();
            } catch (error) {
                console.error('Error parsing stats data:', error);
                statsData = [];
            }
        });

        function initializeCharts() {
            if (!statsData || statsData.length === 0) {
                console.warn('No stats data available');
                return;
            }

            // Prepare data
            const dates = statsData.map(day => new Date(day.date).toLocaleDateString());
            const transactions = statsData.map(day => day.totalTransactions || 0);
            const amounts = statsData.map(day => day.totalAmount || 0);

            // Transaction Chart
            const ctx1 = document.getElementById('transactionChart').getContext('2d');
            transactionChart = new Chart(ctx1, {
                type: 'line',
                data: {
                    labels: dates,
                    datasets: [{
                        label: 'Transactions',
                        data: transactions,
                        borderColor: '#36A2EB',
                        backgroundColor: 'rgba(54, 162, 235, 0.1)',
                        tension: 0.4,
                        fill: true
                    }, {
                        label: 'Amount (Rs)',
                        data: amounts,
                        borderColor: '#FF6384',
                        backgroundColor: 'rgba(255, 99, 132, 0.1)',
                        tension: 0.4,
                        fill: true,
                        yAxisID: 'y1'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            type: 'linear',
                            display: true,
                            position: 'left',
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            grid: {
                                drawOnChartArea: false,
                            },
                        }
                    },
                    plugins: {
                        legend: {
                            position: 'top'
                        }
                    }
                }
            });

            // Coin Distribution Chart
            const coin1Total = statsData.reduce((sum, day) => sum + (day.coinCounts?.coin1 || 0), 0);
            const coin2Total = statsData.reduce((sum, day) => sum + (day.coinCounts?.coin2 || 0), 0);
            const coin5Total = statsData.reduce((sum, day) => sum + (day.coinCounts?.coin5 || 0), 0);
            const coin10Total = statsData.reduce((sum, day) => sum + (day.coinCounts?.coin10 || 0), 0);

            const coinData = [coin1Total, coin2Total, coin5Total, coin10Total];

            const ctx2 = document.getElementById('coinDistributionChart').getContext('2d');
            coinChart = new Chart(ctx2, {
                type: 'pie',
                data: {
                    labels: ['Rs. 1 Coins', 'Rs. 2 Coins', 'Rs. 5 Coins', 'Rs. 10 Coins'],
                    datasets: [{
                        data: coinData,
                        backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0'],
                        borderWidth: 2,
                        borderColor: '#fff'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }

        function switchChart(type) {
            if (currentChartType === type || !transactionChart) return;
            
            currentChartType = type;
            document.getElementById('lineBtn').classList.toggle('active', type === 'line');
            document.getElementById('barBtn').classList.toggle('active', type === 'bar');

            transactionChart.config.type = type;
            transactionChart.update();
        }

        // Table functionality
        function filterTable() {
            const input = document.getElementById('searchInput');
            const filter = input.value.toUpperCase();
            const table = document.getElementById('statisticsTable');
            const tr = table.getElementsByTagName('tr');

            for (let i = 1; i < tr.length; i++) {
                const td = tr[i].getElementsByTagName('td')[0];
                if (td) {
                    const txtValue = td.textContent || td.innerText;
                    tr[i].style.display = txtValue.toUpperCase().indexOf(filter) > -1 ? '' : 'none';
                }
            }
        }

        function sortTable(column) {
            const table = document.getElementById('statisticsTable');
            const tbody = table.getElementsByTagName('tbody')[0];
            const rows = Array.from(tbody.getElementsByTagName('tr'));
            
            rows.sort((a, b) => {
                const aVal = a.getElementsByTagName('td')[column].textContent.trim();
                const bVal = b.getElementsByTagName('td')[column].textContent.trim();
                
                if (column === 0) { // Date column
                    return new Date(aVal) - new Date(bVal);
                } else { // Numeric columns
                    const aNum = parseFloat(aVal.replace('Rs ', ''));
                    const bNum = parseFloat(bVal.replace('Rs ', ''));
                    return aNum - bNum;
                }
            });

            // Clear tbody and append sorted rows
            tbody.innerHTML = '';
            rows.forEach(row => tbody.appendChild(row));
        }

        function exportTable() {
            const table = document.getElementById('statisticsTable');
            let csv = [];
            
            // Get headers
            const headers = Array.from(table.querySelectorAll('thead th')).map(th => 
                th.textContent.replace(/\s+/g, ' ').trim().replace(' ↑', '').replace(' ↓', '')
            );
            csv.push(headers.join(','));
            
            // Get data rows
            const rows = table.querySelectorAll('tbody tr:not([style*="display: none"])');
            rows.forEach(row => {
                const cols = Array.from(row.querySelectorAll('td')).map(td => 
                    '"' + td.textContent.trim() + '"'
                );
                csv.push(cols.join(','));
            });
            
            // Download CSV
            const csvContent = csv.join('\n');
            const blob = new Blob([csvContent], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.setAttribute('hidden', '');
            a.setAttribute('href', url);
            a.setAttribute('download', 'prosorter-statistics.csv');
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
        }
    </script>
</body>
</html>
